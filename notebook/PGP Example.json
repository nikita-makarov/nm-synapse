{
	"name": "PGP Example",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "18c56d0c-4506-46e7-b72a-c368f08940b1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8a936955-932a-425a-8c07-f6035412c4a1/resourceGroups/rg_synapse/providers/Microsoft.Synapse/workspaces/nmdemosynapse/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://nmdemosynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"For demonstration purposes only - not to be used in production"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#install pgpy if not installed\r\n",
					"# pip install pgpy"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.mount( \r\n",
					"    \"abfss://datalake@nmdemostorage1.dfs.core.windows.net\", \r\n",
					"    \"/mnt\", \r\n",
					"    {\"linkedService\":\"nmdemosynapse-WorkspaceDefaultStorage\"} \r\n",
					") "
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"job_id = mssparkutils.env.getJobId()"
				],
				"execution_count": 104
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"raw_file_path = '/synfs/' + job_id + '/mnt/financial_filings/csv/1000045_10K_2016_0001193125-16-620952.csv'\r\n",
					"pub_key_path = '/synfs/' + job_id + '/mnt/pgp_demo/keys/0xB3B14BF1-pub.asc'\r\n",
					"private_key_path = '/synfs/' + job_id + '/mnt/pgp_demo/keys/0xB3B14BF1-sec.asc'\r\n",
					"encrypted_file_path = '/synfs/' + job_id + '/mnt/pgp_demo/messages/encrypted_message.txt'\r\n",
					"encrypted_file_path_fs_format = 'synfs:/' + job_id + '/mnt/pgp_demo/messages/encrypted_message.txt'\r\n",
					"private_key_passphrase = 'testing'"
				],
				"execution_count": 105
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import io\r\n",
					"with io.open(raw_file_path) as f:\r\n",
					"    input_data = f.read()\r\n",
					"# print(input_data)"
				],
				"execution_count": 106
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#import public key for encryption\r\n",
					"import pgpy as pg\r\n",
					"pubkey, _ = pg.PGPKey.from_file(pub_key_path)"
				],
				"execution_count": 107
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#encrypt file and write it to data lake\r\n",
					"message = pg.PGPMessage.new(input_data)\r\n",
					"encrypted_message = pubkey.encrypt(message)"
				],
				"execution_count": 108
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# This works in both Python 2.x and 3.x\r\n",
					"# ASCII-armored format\r\n",
					"# cleartext PGPMessages will also have properly canonicalized and dash-escaped\r\n",
					"# message text\r\n",
					"to_export = str(encrypted_message)"
				],
				"execution_count": 109
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# mssparkutils.fs.help()"
				],
				"execution_count": 110
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###write out the file\r\n",
					"mssparkutils.fs.put(encrypted_file_path_fs_format, to_export, overwrite=True)"
				],
				"execution_count": 111
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#check if it's there\r\n",
					"mssparkutils.fs.ls(encrypted_file_path_fs_format)"
				],
				"execution_count": 112
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### weird bug - need to unmount and remount to read it in again\r\n",
					"print('unmounting...')\r\n",
					"mssparkutils.fs.unmount('/mnt')\r\n",
					"\r\n",
					"print('mounting...')\r\n",
					"mssparkutils.fs.mount( \r\n",
					"    \"abfss://datalake@nmdemostorage1.dfs.core.windows.net\", \r\n",
					"    \"/mnt\", \r\n",
					"    {\"linkedService\":\"nmdemosynapse-WorkspaceDefaultStorage\"} \r\n",
					") \r\n",
					"\r\n",
					"print('mounting complete')"
				],
				"execution_count": 113
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# re-create the variables with new job id (in case it changed)\r\n",
					"job_id = mssparkutils.env.getJobId()\r\n",
					"raw_file_path = '/synfs/' + job_id + '/mnt/financial_filings/csv/1000045_10K_2016_0001193125-16-620952.csv'\r\n",
					"pub_key_path = '/synfs/' + job_id + '/mnt/pgp_demo/keys/0xB3B14BF1-pub.asc'\r\n",
					"private_key_path = '/synfs/' + job_id + '/mnt/pgp_demo/keys/0xB3B14BF1-sec.asc'\r\n",
					"encrypted_file_path = '/synfs/' + job_id + '/mnt/pgp_demo/messages/encrypted_message.txt'\r\n",
					"encrypted_file_path_fs_format = 'synfs:/' + job_id + '/mnt/pgp_demo/messages/encrypted_message.txt'\r\n",
					"private_key_passphrase = 'testing'"
				],
				"execution_count": 119
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## there is a weird bug here, it cannot read the file even though it exists\r\n",
					"\r\n",
					"with io.open(encrypted_file_path) as f:\r\n",
					"    ecnrypted_file = f.read()\r\n",
					"\r\n",
					"# print(input_data)"
				],
				"execution_count": 115
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## load in private key\r\n",
					"# Recipient loads the private key\r\n",
					"private_key, _ = pg.PGPKey.from_file(private_key_path)\r\n",
					"\r\n",
					"## unlock the key with a passphrase\r\n",
					"# private_key.unlock(private_key_passphrase)"
				],
				"execution_count": 116
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# the key is locked, need to unlock with passphrase, has to be used with \"with\" command\r\n",
					"print(private_key.is_unlocked)"
				],
				"execution_count": 120
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#convert to pgp formtat\r\n",
					"encrypted_message = pg.PGPMessage.from_blob(ecnrypted_file)"
				],
				"execution_count": 121
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"with private_key.unlock(\"testing\"):\r\n",
					"    print(private_key.is_unlocked)\r\n",
					"    decrypted_text = private_key.decrypt(encrypted_message).message"
				],
				"execution_count": 125
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# print(decrypted_text)"
				],
				"execution_count": 127
			}
		]
	}
}