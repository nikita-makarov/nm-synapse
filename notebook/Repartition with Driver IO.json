{
	"name": "Repartition with Driver IO",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpoolmain",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1597e04c-38bb-45bf-8d26-7ed011619b55"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/287ea8d5-e1da-4e3d-83e6-552c74157c17/resourceGroups/nm_synapse/providers/Microsoft.Synapse/workspaces/nmsynapse/bigDataPools/sparkpoolmain",
				"name": "sparkpoolmain",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				}
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"This is smaple, non-production ready code"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\n",
					"blob_account_name = \"azureopendatastorage\"\n",
					"blob_container_name = \"nyctlc\"\n",
					"blob_relative_path = \"fhv\"\n",
					"blob_sas_token = r\"\"\n",
					"# Allow SPARK to read from Blob remotely\n",
					"wasbs_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path)\n",
					"\n",
					"spark.conf.set(\n",
					"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\n",
					"    blob_sas_token)\n",
					"df = spark.read.parquet(wasbs_path)\n",
					"display(df.limit(10))"
				],
				"execution_count": 137
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### set params\r\n",
					"\r\n",
					"var_max_row_size = 500000\r\n",
					"var_file_name = \"indigo\"\r\n",
					"var_date = \"20221209\" # make it dynamic in production code"
				],
				"execution_count": 138
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#create unique id for partitioning\r\n",
					"\r\n",
					"from pyspark.sql.functions import monotonically_increasing_id \r\n",
					"\r\n",
					"df_index = df.select(\"*\").withColumn(\"id\", monotonically_increasing_id())\r\n",
					"## limit sample size for this example\r\n",
					"df_index = df_index.limit(1500000)\r\n",
					"df_index.createOrReplaceTempView('temp_df_index')"
				],
				"execution_count": 139
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df_indexed_2 = spark.sql(\"\"\"\r\n",
					"SELECT\r\n",
					"    floor(id / {0}) AS partition_id\r\n",
					"    ,a.*\r\n",
					"FROM temp_df_index a\r\n",
					"\"\"\".format(var_max_row_size))\r\n",
					""
				],
				"execution_count": 140
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# repartition\r\n",
					"df_indexed_2_repartitioned = df_indexed_2.repartition('partition_id')\r\n",
					"df_indexed_2_repartitioned.createOrReplaceTempView('df_indexed_2_repartitioned_sql')"
				],
				"execution_count": 141
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql \r\n",
					"--- check how many partitions we got\r\n",
					"SELECT DISTINCT partition_id FROM df_indexed_2_repartitioned_sql"
				],
				"execution_count": 142
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#write the csv\r\n",
					"df_indexed_2_repartitioned.write.csv('abfss://nmsynapse@nmdatalakestore.dfs.core.windows.net/taxi_data', mode = 'overwrite', header = 'true')"
				],
				"execution_count": 143
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# look at mssparkutils commands we can use\r\n",
					"from notebookutils import mssparkutils\r\n",
					"mssparkutils.fs.help()"
				],
				"execution_count": 144
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"path_list = mssparkutils.fs.ls('abfss://nmsynapse@nmdatalakestore.dfs.core.windows.net/taxi_data')"
				],
				"execution_count": 145
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"csv_only_list = [s for s in path_list if s.path[-3:] == 'csv']"
				],
				"execution_count": 146
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## rename partitioned files in the folder\r\n",
					"for i in csv_only_list:\r\n",
					"    try:\r\n",
					"        print(i.path)\r\n",
					"        i_path = i.path\r\n",
					"        mssparkutils.fs.mv(i.path, 'abfss://nmsynapse@nmdatalakestore.dfs.core.windows.net/taxi_data/' + var_file_name + '-' + var_date + '-' + i_path.split('/')[-1][:10] + '.csv')\r\n",
					"    except:\r\n",
					"        None"
				],
				"execution_count": 147
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for i in csv_only_list:\r\n",
					"    print(i.path)\r\n",
					"    i_path = i.path\r\n",
					"    mssparkutils.fs.mv(i.path, 'abfss://nmsynapse@nmdatalakestore.dfs.core.windows.net/taxi_data/' + var_file_name + '-' + var_date + '-' + i_path.split('/')[-1][:10] + '.csv')"
				],
				"execution_count": 131
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# import os\r\n",
					"# os.getcwd()\r\n",
					"# os.listdir('/mnt/')"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# mssparkutils.fs.cp('abfss://nmsynapse@nmdatalakestore.dfs.core.windows.net/delta', 'file:/mnt/', True)"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# mssparkutils.fs.ls('/')"
				],
				"execution_count": 11
			}
		]
	}
}