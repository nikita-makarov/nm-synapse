{
	"name": "purview bulk delete",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7d9b2ce2-b699-4ef8-ab0e-f9436bb46089"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8a936955-932a-425a-8c07-f6035412c4a1/resourceGroups/rg_synapse/providers/Microsoft.Synapse/workspaces/nmdemosynapse/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://nmdemosynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"print(1)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install pyapacheatlas"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"import os\r\n",
					"# PyApacheAtlas packages\r\n",
					"# Connect to Atlas via a Service Principal\r\n",
					"from pyapacheatlas.auth import ServicePrincipalAuthentication\r\n",
					"from pyapacheatlas.core import PurviewClient  # Communicate with your Atlas server"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"    # Authenticate against your Atlas server\r\n",
					"\r\n",
					"    oauth = ServicePrincipalAuthentication(\r\n",
					"        tenant_id=os.environ.get(\"TENANT_ID\", \"16b3c013-d300-468d-ac64-7eda0820b6d3\"),\r\n",
					"        client_id=os.environ.get(\"CLIENT_ID\", \"ee32a25a-28e0-4deb-aa8f-7644d50b7259\"),\r\n",
					"        client_secret=os.environ.get(\"CLIENT_SECRET\", \"Nn18Q~BnWcex6P02HcJSdMaYo3KHg4uBzz2CKdeZ\")\r\n",
					"    )\r\n",
					"\r\n",
					"    client = PurviewClient(\r\n",
					"        account_name = os.environ.get(\"PURVIEW_NAME\", \"nmpurviewdemo1\"),\r\n",
					"        authentication=oauth\r\n",
					"    )"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#modify the filter_setup as necessary\r\n",
					"#filter_setup = {\"assetType\": \"Azure Synapse Analytics\"}\r\n",
					"#filter_setup = {\"entityType\": \"azure_synapse_dedicated_sql_table\"}\r\n",
					"#filter_setup = {\"collectionId\":\"rwk7yo\"}\r\n",
					"#filter_setup = {\"and\": [{\"collectionId\":\"rwk7yo\"}, {\"assetType\": \"Azure Data Lake Storage Gen2\"}]}\r\n",
					"#query = client.discovery.search_entities('*', search_filter=filter_setup )\r\n",
					"\r\n",
					"\r\n",
					"limit = 100000 #to delete upto 100000 assets\r\n",
					"collection_id = \"osskzg\"\r\n",
					"filter_setup = {\"and\": [{\"collectionId\": collection_id}, {\"assetType\": \"Azure Data Lake Storage Gen2\"}]}\r\n",
					"query = client.discovery.query(limit=limit, filter=filter_setup)\r\n",
					"\r\n",
					"query_list = []\r\n",
					"batch = []\r\n",
					"\r\n",
					"for entry in query[\"value\"]:       \r\n",
					"    query_list.append(entry[\"id\"])\r\n",
					"\r\n",
					"print(query_list)\r\n",
					"print(\"Total #assets to be deleted:\", len(query_list))"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"start = 0\r\n",
					"end = len(query_list)\r\n",
					"batch_size = 100\r\n",
					"for iter in range(start, end, batch_size):\r\n",
					"    batch = query_list[iter:iter+batch_size]\r\n",
					"    print(\"Deleting:\", len(batch))\r\n",
					"    client.delete_entity(guid=batch)"
				],
				"execution_count": null
			}
		]
	}
}