{
	"name": "Get File Metadata",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "802206f2-1149-473b-891e-0f5e3c8418f9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8a936955-932a-425a-8c07-f6035412c4a1/resourceGroups/rg_synapse/providers/Microsoft.Synapse/workspaces/nmdemosynapse/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://nmdemosynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Read all the files in folder"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read \\\r\n",
					"  .format(\"csv\") \\\r\n",
					"  .load('abfss://landing@nmdemostorage1.dfs.core.windows.net/dataverse/bg_extract/*.csv') \\\r\n",
					"  .select(\"*\", \"_metadata\")\r\n",
					"# look at files\r\n",
					"display(df)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Get the file metadata columns that we need and register the dataframe for sql querying"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df2 = df.select(\"_metadata.file_path\", \"_metadata.file_modification_time\").dropDuplicates()\r\n",
					"df2.createOrReplaceTempView(\"tmp_table\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM tmp_table"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- one day earlier for logic to work\r\n",
					"SELECT to_timestamp(date_sub(MIN(file_modification_time),1)) AS LastModified FROM tmp_table"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Only run this for the first time to create the watermark\r\n",
					"try:\r\n",
					"    mssparkutils.fs.ls('abfss://landing@nmdemostorage1.dfs.core.windows.net/dataverse/bg_extract/watermark')\r\n",
					"    print('Watermark already exists')\r\n",
					"except:\r\n",
					"    print('Creating the watermark table')\r\n",
					"    # create the lake database if it does not exist\r\n",
					"    spark.sql(\"\"\"CREATE DATABASE IF NOT EXISTS control\"\"\")\r\n",
					"    df3 = spark.sql(\"\"\" SELECT to_timestamp(date_sub(MIN(file_modification_time),1)) AS LastModified FROM tmp_table \"\"\")\r\n",
					"    # write out table as delta    \r\n",
					"    df3.write.format('delta').mode(\"overwrite\").save('abfss://landing@nmdemostorage1.dfs.core.windows.net/dataverse/bg_extract/watermark')\r\n",
					"    # register as external table in lake database\r\n",
					"    spark.sql(\"\"\"\r\n",
					"    CREATE TABLE IF NOT EXISTS control.watermark\r\n",
					"        USING DELTA\r\n",
					"        LOCATION 'abfss://landing@nmdemostorage1.dfs.core.windows.net/dataverse/bg_extract/watermark'\r\n",
					"    \"\"\")    \r\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Grab the watermark and filter to filepaths that are greater than watermark date"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql \r\n",
					"\r\n",
					"SELECT file_path,file_modification_time  FROM tmp_table\r\n",
					"WHERE file_modification_time > (SELECT MAX(LastModified) as LastModified FROM control.watermark) "
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df3 = spark.sql(\"\"\"\r\n",
					"SELECT \r\n",
					"    file_path\r\n",
					"    , file_modification_time\r\n",
					"    , to_date(file_modification_time) as datefield\r\n",
					"FROM tmp\r\n",
					"WHERE to_date(file_modification_time) >= '2023-01-25'\r\n",
					"\"\"\")"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"list_of_files_to_move = df3.select(\"file_path\").rdd.flatMap(lambda x: x).collect()"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for i in list_of_files_to_move:\r\n",
					"    print(f\"moving {i}\")"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.help()"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs."
				],
				"execution_count": null
			}
		]
	}
}