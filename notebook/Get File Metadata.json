{
	"name": "Get File Metadata",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d6956915-1fb3-4dac-9a68-a64632115642"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8a936955-932a-425a-8c07-f6035412c4a1/resourceGroups/rg_synapse/providers/Microsoft.Synapse/workspaces/nmdemosynapse/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://nmdemosynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Read all the files in folder"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read \\\r\n",
					"  .format(\"csv\") \\\r\n",
					"  .option(\"header\", \"true\") \\\r\n",
					"  .load('abfss://landing@nmdemostorage1.dfs.core.windows.net/dataverse/bg_extract/*.csv') \\\r\n",
					"  .select(\"*\", \"_metadata\")\r\n",
					"## register for SQL querying\r\n",
					"df.createOrReplaceTempView(\"extract_tbl\")\r\n",
					"# look at files\r\n",
					"display(df)"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql \r\n",
					"--- another way to query the files\r\n",
					"SELECT * FROM extract_tbl"
				],
				"execution_count": 35
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Get the file metadata columns that we need and register the dataframe for sql querying"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Only run this for the first time to create the watermark\r\n",
					"try:\r\n",
					"    mssparkutils.fs.ls('abfss://landing@nmdemostorage1.dfs.core.windows.net/dataverse/bg_extract/watermark')\r\n",
					"    print('Watermark already exists')\r\n",
					"except:\r\n",
					"    print('Creating the watermark table')\r\n",
					"    df2 = df.select(\"_metadata.file_path\", \"_metadata.file_modification_time\").dropDuplicates()\r\n",
					"    df2.createOrReplaceTempView(\"tmp_table\")\r\n",
					"    # create the lake database if it does not exist\r\n",
					"    spark.sql(\"\"\"CREATE DATABASE IF NOT EXISTS control\"\"\")\r\n",
					"    df3 = spark.sql(\"\"\" SELECT to_timestamp(date_sub(MIN(file_modification_time),1)) AS LastModified FROM tmp_table \"\"\")\r\n",
					"    # write out table as delta    \r\n",
					"    df3.write.format('delta').mode(\"overwrite\").save('abfss://landing@nmdemostorage1.dfs.core.windows.net/dataverse/bg_extract/watermark')\r\n",
					"    # register as external table in lake database\r\n",
					"    spark.sql(\"\"\"\r\n",
					"    CREATE TABLE IF NOT EXISTS control.watermark\r\n",
					"        USING DELTA\r\n",
					"        LOCATION 'abfss://landing@nmdemostorage1.dfs.core.windows.net/dataverse/bg_extract/watermark'\r\n",
					"    \"\"\")    \r\n",
					""
				],
				"execution_count": 33
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Grab the watermark and filter to filepaths that are greater than watermark date"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.columns"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql \r\n",
					"SELECT \r\n",
					" SalesOrderID\r\n",
					" , RevisionNumber\r\n",
					" , OrderDate\r\n",
					" , DueDate\r\n",
					" , ShipDate\r\n",
					" , Status\r\n",
					" , OnlineOrderFlag\r\n",
					" , SalesOrderNumber\r\n",
					" , PurchaseOrderNumber\r\n",
					" , AccountNumber\r\n",
					" , CustomerID\r\n",
					" , ShipToAddressID\r\n",
					" , BillToAddressID\r\n",
					" , ShipMethod\r\n",
					" , CreditCardApprovalCode\r\n",
					" , SubTotal\r\n",
					" , TaxAmt\r\n",
					" , Freight\r\n",
					" , TotalDue\r\n",
					" , Comment\r\n",
					" , rowguid\r\n",
					" , ModifiedDate\r\n",
					" ,_metadata.file_modification_time AS FileModifiedDate\r\n",
					"FROM extract_tbl\r\n",
					"WHERE _metadata.file_modification_time > (SELECT MAX(LastModified) as LastModified FROM control.watermark)\r\n",
					"-- WHERE SalesOrderID = 71784"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df = spark.sql(\"\"\"\r\n",
					"SELECT \r\n",
					" SalesOrderID\r\n",
					" , RevisionNumber\r\n",
					" , OrderDate\r\n",
					" , DueDate\r\n",
					" , ShipDate\r\n",
					" , Status\r\n",
					" , OnlineOrderFlag\r\n",
					" , SalesOrderNumber\r\n",
					" , PurchaseOrderNumber\r\n",
					" , AccountNumber\r\n",
					" , CustomerID\r\n",
					" , ShipToAddressID\r\n",
					" , BillToAddressID\r\n",
					" , ShipMethod\r\n",
					" , CreditCardApprovalCode\r\n",
					" , SubTotal\r\n",
					" , TaxAmt\r\n",
					" , Freight\r\n",
					" , TotalDue\r\n",
					" , Comment\r\n",
					" , rowguid\r\n",
					" , ModifiedDate\r\n",
					" ,_metadata.file_modification_time AS FileModifiedDate\r\n",
					"FROM extract_tbl\r\n",
					"WHERE _metadata.file_modification_time > (SELECT MAX(LastModified) as LastModified FROM control.watermark)\r\n",
					"\"\"\") "
				],
				"execution_count": 56
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Before writing to staging, cache the dataframe to avoid a weird bug when trying to write directly to Ded SQL Pool"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df.cache()\r\n",
					"final_df.count()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Write to Dedicated SQL Pool"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write using AAD Auth to internal table\r\n",
					"# Add required imports\r\n",
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"\r\n",
					"# Configure and submit the request to write to Synapse Dedicated SQL Pool\r\n",
					"# Sample below is using AAD-based authentication approach; See further examples to leverage SQL Basic auth.\r\n",
					"final_df.write.mode(\"overwrite\").synapsesql(\"SQLPool1.staging.DataverseFiles\")"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql \r\n",
					"SELECT file_path,file_modification_time  FROM tmp_table\r\n",
					"WHERE file_modification_time > (SELECT MAX(LastModified) as LastModified FROM control.watermark) "
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df4 = spark.sql(\"\"\"\r\n",
					"SELECT file_path,file_modification_time  FROM tmp_table\r\n",
					"WHERE file_modification_time > (SELECT MAX(LastModified) as LastModified FROM control.watermark) \r\n",
					"\"\"\")"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"list_of_files_to_move = df3.select(\"file_path\").rdd.flatMap(lambda x: x).collect()"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for i in list_of_files_to_move:\r\n",
					"    print(f\"moving {i}\")"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.help()"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs."
				],
				"execution_count": null
			}
		]
	}
}