{
	"name": "sales_transactions_incr_hc",
	"properties": {
		"folder": {
			"name": "E2E Lakehouse Metadata/Silver"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f4696445-427e-4f94-b8d6-79025c9729e6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8a936955-932a-425a-8c07-f6035412c4a1/resourceGroups/rg_synapse/providers/Microsoft.Synapse/workspaces/nmdemosynapse/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://nmdemosynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Silver Notebook for txmybw00 -> sales_transactions\r\n",
					"Hard-coded version for demonstration purposes\r\n",
					"\r\n",
					"Here is a good guide on how to use spark notebooks https://learn.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-development-using-notebooks\r\n",
					"______________________________________________"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Look up the changed rows from change data feed"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"DESCRIBE HISTORY salesrusdb1_raw.txmybw00 LIMIT 4"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# put the result above into \r\n",
					"latest_version = spark.sql(\"\"\"DESCRIBE HISTORY salesrusdb1_raw.txmybw00 LIMIT 1\"\"\").first()['version']\r\n",
					"print('latest version is ', latest_version)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Read in latest rows into dataframe and create temporary view"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"incr_df = spark.read.format(\"delta\") \\\r\n",
					"            .option(\"readChangeFeed\", \"true\") \\\r\n",
					"            .option(\"startingVersion\", latest_version) \\\r\n",
					"            .table(\"salesrusdb1_raw.txmybw00\")\r\n",
					"incr_df.createOrReplaceTempView(\"incr_tbl\")\r\n",
					"display(incr_df)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Write our transformation interactively"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    trid AS TransactionID\r\n",
					"    , bb1 as Email\r\n",
					"    , TO_DATE(trdt, 'mm/dd/yyyy') as TransactionDate\r\n",
					"    , YEAR(TO_DATE(trdt, 'mm/dd/yyyy')) AS TransactionYear\r\n",
					"    , MONTH(TO_DATE(trdt, 'mm/dd/yyyy')) AS TransactionMonth\r\n",
					"    , cust AS CustomerName\r\n",
					"    , ctry AS Country\r\n",
					"    , region AS Region\r\n",
					"    , city AS City\r\n",
					"    , INT(prtp) AS ProductID\r\n",
					"    , clrs as ProductColor\r\n",
					"    , amt as DollarAmount\r\n",
					"    , lastmodifieddate AS LastModifiedDate\r\n",
					"    , guid as GUID\r\n",
					"    , _change_type\r\n",
					"FROM incr_tbl\r\n",
					"WHERE _change_type IN ('insert', 'update_postimage')\r\n",
					"ORDER BY lastmodifieddate DESC"
				],
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Once done figuring out the logic, put it into spark.sql and register as dataframe"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"transformed_incr_df = spark.sql(\r\n",
					"    \"\"\"\r\n",
					"    SELECT\r\n",
					"        trid AS TransactionID\r\n",
					"        , bb1 as Email\r\n",
					"        , TO_DATE(trdt, 'mm/dd/yyyy') as TransactionDate\r\n",
					"        , YEAR(TO_DATE(trdt, 'mm/dd/yyyy')) AS TransactionYear\r\n",
					"        , MONTH(TO_DATE(trdt, 'mm/dd/yyyy')) AS TransactionMonth\r\n",
					"        , cust AS CustomerName\r\n",
					"        , ctry AS Country\r\n",
					"        , region AS Region\r\n",
					"        , city AS City\r\n",
					"        , INT(prtp) AS ProductID\r\n",
					"        , clrs as ProductColor\r\n",
					"        , amt as DollarAmount\r\n",
					"        , lastmodifieddate AS LastModifiedDate\r\n",
					"        , guid as GUID\r\n",
					"    FROM incr_tbl\r\n",
					"    WHERE _change_type IN ('insert', 'update_postimage')\r\n",
					"    \"\"\"\r\n",
					")\r\n",
					"transformed_incr_df.createOrReplaceTempView('transformed_incr_tbl')\r\n",
					"display(transformed_incr_df)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"MERGE MERGE MERGE !!!!"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"MERGE INTO salesrusdb1_enriched.sales_transactions tgt\r\n",
					"USING transformed_incr_tbl src\r\n",
					"ON tgt.GUID = src.GUID\r\n",
					"AND tgt.TransactionYear = src.TransactionYear\r\n",
					"AND tgt.TransactionMonth = src.TransactionMonth\r\n",
					"WHEN MATCHED THEN\r\n",
					"  UPDATE SET *\r\n",
					"WHEN NOT MATCHED\r\n",
					"  THEN INSERT *"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql \r\n",
					"DESCRIBE HISTORY salesrusdb1_enriched.sales_transactions"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT * FROM salesrusdb1_enriched.sales_transactions ORDER BY lastmodifieddate DESC"
				],
				"execution_count": 13
			}
		]
	}
}