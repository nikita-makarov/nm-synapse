{
	"name": "02 Set up RLS DDM",
	"properties": {
		"folder": {
			"name": "WWI Demo"
		},
		"content": {
			"query": "\n/*****************************************************************************************************************/\n-- 1. Setting up Dynamic Data Masking on EmailId column of wwi.EmployeePIIData\n\n        ALTER TABLE wwi.EmployeePIIData  \n        ALTER COLUMN EmailId varchar(100) MASKED WITH (FUNCTION = 'email()'); \n\n        ALTER TABLE wwi.EmployeePIIData  \n        ALTER COLUMN Phone varchar(100) MASKED WITH (FUNCTION = 'partial(0,\"XXX-XXX-XX\",2)'); \n\n/*****************************************************************************************************************/\n\n-- 2. Setting up Row Level Security on State\n\n        --Create User and Grant Select Permissions\n        CREATE USER [youralias@domain.com] FROM EXTERNAL PROVIDER\n        GRANT SELECT ON wwi.EmployeePIIData TO [youralias@domain.com] \n        EXEC sp_addrolemember 'db_datareader', 'youralias@domain.com'\n\n        CREATE USER [someoneelse@domain.com] FROM EXTERNAL PROVIDER\n        GRANT SELECT ON wwi.EmployeePIIData TO [someoneelse@domain.com] \n        EXEC sp_addrolemember 'db_datareader', 'someoneelse@domain.com'\n\n\n        --Grant Impersonate permissions for AAD login \n        GRANT IMPERSONATE ON USER::[someoneelse@domain.com] TO [youralias@domain.com];\n        GRANT IMPERSONATE ON USER::[youralias@domain.com] TO [someoneelse@domain.com];\n\n        --Create roles as values present in column \n        --CREATE ROLE [DE]; --This role already exists for SQL login\n        CREATE ROLE [CA];\n        CREATE ROLE [PA];\n        CREATE ROLE [NY];\n       \n        -- Add AAD users to roles      \n        EXEC sp_addrolemember 'NY', 'youralias@domain.com';\n        EXEC sp_addrolemember 'PA', 'youralias@domain.com';\n        EXEC sp_addrolemember 'CA', 'someoneelse@domain.com';\n\n\n        CREATE FUNCTION wwi.fn_securitypredicate_rolemember(@State AS sysname)  \n        RETURNS TABLE  \n        WITH SCHEMABINDING  \n        AS  \n        RETURN SELECT 1 AS fn_securitypredicate_result   \n        WHERE \n            (@State = 'NY' and IS_ROLEMEMBER('NY') = 1) \n        or (@State = 'CA' and IS_ROLEMEMBER('CA') = 1) \n        or (@State = 'PA' and IS_ROLEMEMBER('PA') = 1)\n        or IS_ROLEMEMBER('dbo') = 1; \n\n        --Create Security Policy to filter rows based on column values \n        CREATE SECURITY POLICY StateFilter_rolemember \n        ADD FILTER PREDICATE wwi.fn_securitypredicate_rolemember([state])   \n        ON  wwi.EmployeePIIData \n        WITH (STATE = ON); \n\n\n        --Test Runs\n        select USER_NAME()\n        select top 100 * from wwi.EmployeePIIData \n        EXECUTE AS USER ='youralias@domain.com'\n        select user_name() as UserName, is_rolemember('NY') As IsALCustomer, is_rolemember('CA') As IsCACustomer\n        select top 100 * from wwi.EmployeePIIData ;\n        revert\n        EXECUTE AS USER ='someoneelse@domain.com'\n        select user_name() as UserName, is_rolemember('NY') As IsALCustomer, is_rolemember('CA') As IsCACustomer\n        select top 100 [State], * from wwi.EmployeePIIData ;\n        revert\n        select user_name() as UserName, is_rolemember('NY') As IsALCustomer, is_rolemember('CA') As IsCACustomer\n        select top 100 * from wwi.EmployeePIIData ;\n\n\n\n--      DROP SECURITY POLICY StateFilter_rolemember; \n--      DROP FUNCTION Security.fn_securitypredicate_rolemember\n--      DROP SCHEMA Security;",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}